// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/ffigen_app.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FfigenAppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FfigenAppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FfigenAppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> create_A() {
    return _create_A();
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      get createAPtr => _create_APtr;
  late final _create_APtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>('create_A');
  late final _create_A =
      _create_APtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  void release_A(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _release_A(
      arg0,
    );
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get releaseAPtr => _release_APtr;
  late final _release_APtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'release_A');
  late final _release_A =
      _release_APtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void set_Value(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _set_Value(
      arg0,
      arg1,
    );
  }

  late final _set_ValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'set_Value');
  late final _set_Value =
      _set_ValuePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int get_Value(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _get_Value(
      arg0,
    );
  }

  late final _get_ValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'get_Value');
  late final _get_Value =
      _get_ValuePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int refCount(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _refCount(
      arg0,
    );
  }

  late final _refCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'refCount');
  late final _refCount =
      _refCountPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> create_A_Container() {
    return _create_A_Container();
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      get createAContainerPtr => _create_A_ContainerPtr;
  late final _create_A_ContainerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'create_A_Container');
  late final _create_A_Container =
      _create_A_ContainerPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  void release_A_Container(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _release_A_Container(
      arg0,
    );
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get releaseAContainerPtr => _release_A_ContainerPtr;
  late final _release_A_ContainerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'release_A_Container');
  late final _release_A_Container = _release_A_ContainerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void storePtr(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _storePtr(
      arg0,
      arg1,
    );
  }

  late final _storePtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('storePtr');
  late final _storePtr = _storePtrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> getPtr(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getPtr(
      arg0,
      arg1,
    );
  }

  late final _getPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('getPtr');
  late final _getPtr = _getPtrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();
}
